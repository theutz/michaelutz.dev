{
  "pages/*.tsx": {
    "alternate": "__tests__/pages/{}.test.tsx",
    "related": [
      "__tests__/pages/{}.test.tsx",
      "cypress/integration/pages/*.spec.ts"
    ],
    "type": "page"
  },
  "__tests__/pages/*.test.tsx": {
    "alternate": "pages/{}.tsx",
    "related": [
      "pages/{}.tsx",
      "{dirname}/__snapshots__/{basename}.test.tsx.snap"
    ],
    "type": "test"
  },
  "__tests__/pages/**/__snapshots__/*.snap": {
    "alternate": "__tests__/pages/{}",
    "related": ["pages/{}"],
    "type": "snap"
  },
  "cypress/integration/pages/*.spec.ts": {
    "alternate": "pages/{}.tsx",
    "related": "pages/{}.tsx",
    "type": "int"
  },
  "components/*.tsx": {
    "alternate": "components/{}.test.tsx",
    "type": "component"
  },
  "components/*.test.tsx": {
    "alternate": "components/{}.tsx",
    "related": [
      "{dirname}/__snapshots__/{basename}.test.tsx.snap",
      "components/{}.tsx"
    ],
    "type": "test"
  },
  "components/**/__snapshots__/*.snap": {
    "alternate": "components/{}.test.tsx",
    "related": ["components/{}", "components/{}"],
    "type": "snap"
  },
  "cypress/integration/components/*.spec.ts": {
    "alternate": "components/{}.tsx",
    "related": "pages/{}.tsx",
    "type": "int"
  },
  "hooks/*.tsx": {
    "alternate": "hooks/{}.test.tsx",
    "related": ["hooks/{}.test.tsx"],
    "type": "hook",
    "template": [
      "import {open} useState {close} from 'react'",
      "",
      "export function {basename}() {open}",
      "\treturn {open}{close};",
      "{close};"
    ]
  },
  "hooks/*.test.tsx": {
    "alternate": "hooks/{}.tsx",
    "related": ["hooks/{}.tsx"],
    "type": "test",
    "template": [
      "import {open} renderHook, act {close} from '@testing-library/react-hooks'",
      "import {open} {basename} {close} from 'hooks/{}'",
      "",
      "describe(`{basename}`, () => {open}",
      "\tit(`fails`, () => {open}",
      "\t\tconst {open} result {close} = renderHook(() => {basename}())",
      "",
      "\t\tact(() => {open}",
      "\t\t\tresult.current.ACTION()",
      "\t\t{close});",
      "",
      "\t\texpect(result.current.STATE).toBe(false)",
      "\t{close})",
      "{close});"
    ]
  },
  "*": {
    "make": "npm run build"
  }
}
